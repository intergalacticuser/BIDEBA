import pkg from "@ton/core";
import tonpkg from "@ton/ton";
import { mnemonicToWalletKey } from "@ton/crypto";
import fs from "fs";

const { Address, Cell, toNano, beginCell, contractAddress, fromNano } = pkg;
const { TonClient4, WalletContractV5R1, internal } = tonpkg;

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const MNEMONIC = "word1 word2 word3 ... word24"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é —Ñ—Ä–∞–∑—É
const CONTRACT_FILE = "/workspace/build/BdbSale.compiled.json"; // –ø—É—Ç—å –∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
const OWNER = "UQC7SWSjzNB91HA3ku2v7eMoYuemM__puqmXUi1e4hmORkTP"; // –≤–∞—à –∫–æ—à–µ–ª–µ–∫-–≤–ª–∞–¥–µ–ª–µ—Ü
const BDB_MASTER = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"; // –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –º–∞—Å—Ç–µ—Ä BDB
const USDT_MASTER = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9u"; // –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –º–∞—Å—Ç–µ—Ä USDT (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

// –¶–µ–Ω—ã –∏ –ª–∏–º–∏—Ç—ã
const PRICE_TON_PER_BDB = 5000n;      // –Ω–∞–Ω–æ—Ç–æ–Ω–æ–≤ –∑–∞ 1 BDB (base unit)
const PRICE_USDT_PER_BDB = 0n;        // –µ–¥–∏–Ω–∏—Ü USDT –∑–∞ 1 BDB (–ø–æ–∫–∞ 0 –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç–µ –∑–∞ USDT)
const REMAINING_SUPPLY = 200000000n;  // —Å–∫–æ–ª—å–∫–æ BDB –ø—Ä–æ–¥–∞–µ–º (–≤ base units)

// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–æ—à–µ–ª—å–∫–∏ –ø—É—Å—Ç—ã–µ (addr_none). –ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è —É—Å—Ç–∞–Ω–æ–≤–∏–º —á–µ—Ä–µ–∑ SetWallets
const BDB_WALLET_ADDR = "";  // –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —É–∫–∞–∑–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
const USDT_WALLET_ADDR = ""; // –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —É–∫–∞–∑–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω

// –°–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
function buildSetWalletsMessage(bdbWallet, usdtWallet) {
	return beginCell()
		.storeUint(0xbdb50001, 32) // –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π op –¥–ª—è SetWallets (Tact —Å–∞–º –º–∞–ø–∏—Ç, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π)
		.storeRef(
			beginCell()
				.storeAddress(bdbWallet)
				.storeAddress(usdtWallet)
				.endCell()
		)
		.endCell();
}

function buildUpdateTonPriceMessage(newPrice) {
	return beginCell()
		.storeUint(0xbdb50002, 32)
		.storeRef(
			beginCell().storeUint(newPrice, 64).endCell()
		)
		.endCell();
}

function buildUpdateUsdtPriceMessage(newPrice) {
	return beginCell()
		.storeUint(0xbdb50003, 32)
		.storeRef(
			beginCell().storeUint(newPrice, 64).endCell()
		)
		.endCell();
}

async function main() {
	const client = new TonClient4({ endpoint: "https://mainnet-v4.tonhubapi.com" });

	// –ö–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
	const compiled = JSON.parse(fs.readFileSync(CONTRACT_FILE, "utf-8"));
	if (!compiled?.hex) throw new Error("compiled.json –±–µ–∑ –ø–æ–ª—è hex");
	const codeCell = Cell.fromBoc(Buffer.from(compiled.hex, "hex"))[0];

	// Data ‚Äî –ø–æ—Ä—è–¥–æ–∫ –∫–∞–∫ –≤ init BdbSale(init: owner, bdbMaster, usdtMaster, priceTonPerBdb, priceUsdtPerBdb, remainingSupply, bdbWallet, usdtWallet)
	const dataCell = beginCell()
		.storeAddress(Address.parse(OWNER))
		.storeAddress(Address.parse(BDB_MASTER))
		.storeAddress(Address.parse(USDT_MASTER))
		.storeUint(PRICE_TON_PER_BDB, 64)
		.storeUint(PRICE_USDT_PER_BDB, 64)
		.storeUint(REMAINING_SUPPLY, 64)
		.storeAddress(BDB_WALLET_ADDR ? Address.parse(BDB_WALLET_ADDR) : null)
		.storeAddress(USDT_WALLET_ADDR ? Address.parse(USDT_WALLET_ADDR) : null)
		.endCell();

	const saleAddress = contractAddress(0, { code: codeCell, data: dataCell });
	console.log("‚úÖ Sale address:", saleAddress.toString());
	console.log(`üîé Tonviewer: https://tonviewer.com/${saleAddress.toString()}`);

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫
	const key = await mnemonicToWalletKey(MNEMONIC.trim().split(/\s+/g));
	const wallet = client.open(WalletContractV5R1.create({ workchain: 0, publicKey: key.publicKey }));
	console.log("üîë Wallet:", wallet.address.toString());
	const balance = await wallet.getBalance();
	console.log("üí∞ Balance:", fromNano(balance), "TON");
	if (balance < toNano("0.2")) throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –¥–ª—è –¥–µ–ø–ª–æ—è –∏ –∞–¥–º–∏–Ω-–∫–æ–ª–ª–æ–≤ (~0.2 TON)");

	// Deploy —Å StateInit
	console.log("üöÄ Deploy...");
	let seqno = await wallet.getSeqno();
	await wallet.sendTransfer({
		secretKey: key.secretKey,
		seqno,
		messages: [
			internal({
				to: saleAddress,
				value: toNano("0.12"),
				bounce: false,
				init: { code: codeCell, data: dataCell },
			}),
		],
	});
	console.log("‚úÖ Deploy sent. Wait 30-60s...");

	// –ñ–¥—ë–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ seqno
	while (true) {
		const next = await wallet.getSeqno();
		if (next !== seqno) break;
		await new Promise((r) => setTimeout(r, 3000));
	}

	// –ï—Å–ª–∏ –Ω—É–∂–Ω—ã SetWallets/UpdatePrice ‚Äî –ø–æ—à–ª—ë–º –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	// –ü—Ä–∏–º–µ—Ä: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã
	const needSetWallets = false; // –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –≤ true –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –≤—ã—à–µ
	if (needSetWallets) {
		seqno = await wallet.getSeqno();
		await wallet.sendTransfer({
			secretKey: key.secretKey,
			seqno,
			messages: [
				internal({
					to: saleAddress,
					value: toNano("0.05"),
					bounce: true,
					body: buildSetWalletsMessage(
						Address.parse(BDB_WALLET_ADDR),
						Address.parse(USDT_WALLET_ADDR)
					),
				}),
			],
		});
		console.log("‚úÖ SetWallets sent");
	}

	// –ü—Ä–∏–º–µ—Ä: –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	const needUpdatePrices = false;
	if (needUpdatePrices) {
		seqno = await wallet.getSeqno();
		await wallet.sendTransfer({
			secretKey: key.secretKey,
			seqno,
			messages: [
				internal({
					to: saleAddress,
					value: toNano("0.03"),
					bounce: true,
					body: buildUpdateTonPriceMessage(PRICE_TON_PER_BDB),
				}),
				internal({
					to: saleAddress,
					value: toNano("0.03"),
					bounce: true,
					body: buildUpdateUsdtPriceMessage(PRICE_USDT_PER_BDB),
				}),
			],
		});
		console.log("‚úÖ Update prices sent");
	}

	console.log("üéâ Done. Check:", `https://tonviewer.com/${saleAddress.toString()}`);
}

main().catch((e) => {
	console.error("‚ùå Error:", e);
	process.exit(1);
});