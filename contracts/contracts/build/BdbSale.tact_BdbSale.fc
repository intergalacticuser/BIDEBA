#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; BdbSale.tact_BdbSale.headers.fc
;;
;; Header files for BdbSale
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; $BdbSale$_store
builder $BdbSale$_store(builder build_0, (slice, slice, slice, int, int, int, slice, slice) v) inline;

;; $BdbSale$_load
(slice, ((slice, slice, slice, int, int, int, slice, slice))) $BdbSale$_load(slice sc_0) inline;

;; $BdbSale$init$_load
(slice, ((slice, slice, slice, int, int, int, slice, slice))) $BdbSale$init$_load(slice sc_0) inline;

;; $BdbSale$_contract_init
(slice, slice, slice, int, int, int, slice, slice) $BdbSale$_contract_init(slice $owner, slice $bdbMaster, slice $usdtMaster, int $priceTonPerBdb, int $priceUsdtPerBdb, int $remainingSupply, slice $bdbWallet, slice $usdtWallet) impure inline;

;; $BdbSale$_contract_load
(slice, slice, slice, int, int, int, slice, slice) $BdbSale$_contract_load() impure inline;

;; $BdbSale$_contract_store
() $BdbSale$_contract_store((slice, slice, slice, int, int, int, slice, slice) v) impure inline;

;; $SendParameters$_constructor_to_value_bounce_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_bounce_body(slice $to, int $value, int $bounce, cell $body) inline;

;; $SendParameters$_constructor_to_value_bounce
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_bounce(slice $to, int $value, int $bounce) inline;

;; $BdbSale$_fun_handleUsdtNotification
((slice, slice, slice, int, int, int, slice, slice), ()) $BdbSale$_fun_handleUsdtNotification((slice, slice, slice, int, int, int, slice, slice) $self, slice $in_msg) impure inline_ref;


;; BdbSale.tact_BdbSale.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(slice, slice) __tact_load_address_opt(slice cs) asm """

            b{00} SDBEGINSQ
            IF:<{
              PUSHNULL
            }>ELSE<{
              LDMSGADDR
              SWAP
            }>

""";

builder __tact_store_addr_none(builder b) asm "b{00} STSLICECONST";

builder __tact_store_address_opt(builder b, slice address) inline {
    if (null?(address)) {
        return __tact_store_addr_none(b);
    } else {
        return b.store_slice(address);
    }
}

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

builder $global_beginCell() impure asm """
    NEWC
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

builder $Builder$_fun_storeBit(int $value, builder $self) impure asm """
    1 STI
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeRef(cell $cell, builder $self) impure asm """
    STREF
""";

builder $Builder$_fun_storeMaybeRef(cell $cell, builder $self) impure asm """
    STOPTREF
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

builder $Builder$_fun_storeAddress(builder $self, slice $address) impure asm """
    STSLICER
""";

(slice, int) $Slice$_fun_loadCoins(slice $self) impure asm( -> 1 0) """
    LDVARUINT16
""";

int $Slice$_fun_bits(slice $self) impure asm """
    SBITS
""";

(slice, slice) $Slice$_fun_loadAddress(slice $self) impure asm( -> 1 0) """
    LDMSGADDR
""";

;; BdbSale.tact_BdbSale.storage.fc
;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_bounce_body(slice $to, int $value, int $bounce, cell $body) inline {
    return (0, $body, null(), null(), $value, $to, $bounce);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_bounce(slice $to, int $value, int $bounce) inline {
    return (0, null(), null(), null(), $value, $to, $bounce);
}

;;
;; Type: BdbSale
;; TLB: _ owner:address bdbMaster:address usdtMaster:address priceTonPerBdb:uint64 priceUsdtPerBdb:uint64 remainingSupply:uint64 bdbWallet:address usdtWallet:address = BdbSale
;;

builder $BdbSale$_store(builder build_0, (slice, slice, slice, int, int, int, slice, slice) v) inline {
    var (v'owner, v'bdbMaster, v'usdtMaster, v'priceTonPerBdb, v'priceUsdtPerBdb, v'remainingSupply, v'bdbWallet, v'usdtWallet) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'bdbMaster);
    build_0 = build_0.store_slice(v'usdtMaster);
    build_0 = build_0.store_uint(v'priceTonPerBdb, 64);
    build_0 = build_0.store_uint(v'priceUsdtPerBdb, 64);
    build_0 = build_0.store_uint(v'remainingSupply, 64);
    var build_1 = begin_cell();
    build_1 = __tact_store_address_opt(build_1, v'bdbWallet);
    build_1 = __tact_store_address_opt(build_1, v'usdtWallet);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

(slice, ((slice, slice, slice, int, int, int, slice, slice))) $BdbSale$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'bdbMaster = sc_0~load_msg_addr();
    var v'usdtMaster = sc_0~load_msg_addr();
    var v'priceTonPerBdb = sc_0~load_uint(64);
    var v'priceUsdtPerBdb = sc_0~load_uint(64);
    var v'remainingSupply = sc_0~load_uint(64);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'bdbWallet = sc_1~__tact_load_address_opt();
    var v'usdtWallet = sc_1~__tact_load_address_opt();
    return (sc_0, (v'owner, v'bdbMaster, v'usdtMaster, v'priceTonPerBdb, v'priceUsdtPerBdb, v'remainingSupply, v'bdbWallet, v'usdtWallet));
}

(slice, ((slice, slice, slice, int, int, int, slice, slice))) $BdbSale$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'bdbMaster = sc_0~load_msg_addr();
    var v'usdtMaster = sc_0~load_msg_addr();
    var v'priceTonPerBdb = sc_0~load_uint(64);
    var v'priceUsdtPerBdb = sc_0~load_uint(64);
    var v'remainingSupply = sc_0~load_uint(64);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'bdbWallet = sc_1~__tact_load_address_opt();
    var v'usdtWallet = sc_1~__tact_load_address_opt();
    return (sc_0, (v'owner, v'bdbMaster, v'usdtMaster, v'priceTonPerBdb, v'priceUsdtPerBdb, v'remainingSupply, v'bdbWallet, v'usdtWallet));
}

(slice, slice, slice, int, int, int, slice, slice) $BdbSale$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$BdbSale$_load();
    }
    else {
        (slice $owner, slice $bdbMaster, slice $usdtMaster, int $priceTonPerBdb, int $priceUsdtPerBdb, int $remainingSupply, slice $bdbWallet, slice $usdtWallet) = $sc~$BdbSale$init$_load();
        $sc.end_parse();
        return $BdbSale$_contract_init($owner, $bdbMaster, $usdtMaster, $priceTonPerBdb, $priceUsdtPerBdb, $remainingSupply, $bdbWallet, $usdtWallet);
    }
}

() $BdbSale$_contract_store((slice, slice, slice, int, int, int, slice, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $BdbSale$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract BdbSale functions
;;

(slice, slice, slice, int, int, int, slice, slice) $BdbSale$_contract_init(slice $owner, slice $bdbMaster, slice $usdtMaster, int $priceTonPerBdb, int $priceUsdtPerBdb, int $remainingSupply, slice $bdbWallet, slice $usdtWallet) impure inline {
    var (($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet)) = (null(), null(), null(), null(), null(), null(), null(), null());
    $self'owner = $owner;
    $self'bdbMaster = $bdbMaster;
    $self'usdtMaster = $usdtMaster;
    $self'priceTonPerBdb = $priceTonPerBdb;
    $self'priceUsdtPerBdb = $priceUsdtPerBdb;
    $self'remainingSupply = $remainingSupply;
    $self'bdbWallet = $bdbWallet;
    $self'usdtWallet = $usdtWallet;
    return ($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet);
}

((slice, slice, slice, int, int, int, slice, slice), ()) $BdbSale$_fun_handleUsdtNotification((slice, slice, slice, int, int, int, slice, slice) $self, slice $in_msg) impure inline_ref {
    var (($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet)) = $self;
    var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_if(406, null?($self'usdtWallet));
    throw_if(407, ( ~ equal_slices_bits($ctx'sender, __tact_not_null($self'usdtWallet)) ));
    int $_query = $in_msg~load_uint(64);
    int $paidUsdt = $in_msg~$Slice$_fun_loadCoins();
    slice $buyer = $in_msg~$Slice$_fun_loadAddress();
    throw_if(400, ($self'priceUsdtPerBdb <= 0));
    int $amountBdb = ($paidUsdt / $self'priceUsdtPerBdb);
    throw_if(101, ($amountBdb <= 0));
    throw_if(102, ($amountBdb > $self'remainingSupply));
    throw_if(405, null?($self'bdbWallet));
    cell $bdbTransfer = $Builder$_fun_endCell($Builder$_fun_storeRef($Builder$_fun_endCell($global_beginCell()), $Builder$_fun_storeBit(false, $Builder$_fun_storeCoins($Builder$_fun_storeMaybeRef(null(), $Builder$_fun_storeAddress($Builder$_fun_storeAddress($Builder$_fun_storeCoins(store_uint(store_uint($global_beginCell(), 260734629, 32), 0, 64), $amountBdb), $buyer), $self'owner)), 50000000))));
    $global_send($SendParameters$_constructor_to_value_bounce_body(__tact_not_null($self'bdbWallet), 70000000, true, $bdbTransfer));
    cell $usdtForward = $Builder$_fun_endCell($Builder$_fun_storeRef($Builder$_fun_endCell($global_beginCell()), $Builder$_fun_storeBit(false, $Builder$_fun_storeCoins($Builder$_fun_storeMaybeRef(null(), $Builder$_fun_storeAddress($Builder$_fun_storeAddress($Builder$_fun_storeCoins(store_uint(store_uint($global_beginCell(), 260734629, 32), 0, 64), $paidUsdt), $self'owner), $self'owner)), 50000000))));
    $global_send($SendParameters$_constructor_to_value_bounce_body(__tact_not_null($self'usdtWallet), 70000000, true, $usdtForward));
    if (($ctx'value > 0)) {
        $global_send($SendParameters$_constructor_to_value_bounce($self'owner, $ctx'value, false));
    }
    $self'remainingSupply = ($self'remainingSupply - $amountBdb);
    return (($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet), ());
}

;;
;; Get methods of a Contract BdbSale
;;

;;
;; Routing of a Contract BdbSale
;;


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet) = $BdbSale$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    slice $in_msg = in_msg;
    var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    if (($Slice$_fun_bits($in_msg) >= 32)) {
        int $op = $in_msg~load_uint(32);
        if (($op == 3182755841)) {
            throw_if(403, ( ~ equal_slices_bits($ctx'sender, $self'owner) ));
            slice $newBdb = $in_msg~$Slice$_fun_loadAddress();
            slice $newUsdt = $in_msg~$Slice$_fun_loadAddress();
            $self'bdbWallet = $newBdb;
            $self'usdtWallet = $newUsdt;
            $BdbSale$_contract_store(($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet));
            return ();
        }
        if (($op == 3182755842)) {
            throw_if(403, ( ~ equal_slices_bits($ctx'sender, $self'owner) ));
            int $p = $in_msg~load_uint(64);
            $self'priceTonPerBdb = $p;
            $BdbSale$_contract_store(($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet));
            return ();
        }
        if (($op == 3182755843)) {
            throw_if(403, ( ~ equal_slices_bits($ctx'sender, $self'owner) ));
            int $p = $in_msg~load_uint(64);
            $self'priceUsdtPerBdb = $p;
            $BdbSale$_contract_store(($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet));
            return ();
        }
        if (($op == 1935855772)) {
            ($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet)~$BdbSale$_fun_handleUsdtNotification($in_msg);
            $BdbSale$_contract_store(($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet));
            return ();
        }
    }
    if (($ctx'value <= 0)) {
        $BdbSale$_contract_store(($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet));
        return ();
    }
    throw_if(400, ($self'priceTonPerBdb <= 0));
    throw_if(405, null?($self'bdbWallet));
    int $usableValue = ($ctx'value - 70000000);
    throw_if(101, ($usableValue <= 0));
    int $amount = ($usableValue / $self'priceTonPerBdb);
    throw_if(101, ($amount <= 0));
    throw_if(102, ($amount > $self'remainingSupply));
    cell $transferMsg = $Builder$_fun_endCell($Builder$_fun_storeRef($Builder$_fun_endCell($global_beginCell()), $Builder$_fun_storeBit(false, $Builder$_fun_storeCoins($Builder$_fun_storeMaybeRef(null(), $Builder$_fun_storeAddress($Builder$_fun_storeAddress($Builder$_fun_storeCoins(store_uint(store_uint($global_beginCell(), 260734629, 32), 0, 64), $amount), $ctx'sender), $self'owner)), 50000000))));
    $global_send($SendParameters$_constructor_to_value_bounce_body(__tact_not_null($self'bdbWallet), 70000000, true, $transferMsg));
    $global_send($SendParameters$_constructor_to_value_bounce($self'owner, ($ctx'value - 70000000), false));
    $self'remainingSupply = ($self'remainingSupply - $amount);
    $BdbSale$_contract_store(($self'owner, $self'bdbMaster, $self'usdtMaster, $self'priceTonPerBdb, $self'priceUsdtPerBdb, $self'remainingSupply, $self'bdbWallet, $self'usdtWallet));
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}