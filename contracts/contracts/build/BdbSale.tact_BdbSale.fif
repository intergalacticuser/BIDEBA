// automatically generated from `@stdlib/std/stdlib.fc` `/workspace/contracts/contracts/build/BdbSale.tact_BdbSale.fc` 
PROGRAM{
  DECLPROC __tact_store_address_opt
  DECLPROC __tact_not_null
  DECLPROC __tact_context_get
  DECLPROC $BdbSale$_store
  DECLPROC $BdbSale$_load
  DECLPROC $BdbSale$init$_load
  DECLPROC $BdbSale$_contract_init
  DECLPROC $BdbSale$_contract_load
  DECLPROC $BdbSale$_contract_store
  DECLPROC $SendParameters$_constructor_to_value_bounce_body
  DECLPROC $SendParameters$_constructor_to_value_bounce
  DECLPROC $BdbSale$_fun_handleUsdtNotification
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_store_address_opt PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      b{00} STSLICECONST
    }>ELSE<{
      SWAP
      STSLICE
    }>
  }>
  __tact_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  $BdbSale$_store PROCINLINE:<{
    s7 s8 XCHG2
    STSLICE
    s1 s5 XCHG
    STSLICE
    s1 s3 XCHG
    STSLICE
    64 STU
    64 STU
    64 STU
    NEWC
    ROT
    __tact_store_address_opt INLINECALLDICT
    ROT
    __tact_store_address_opt INLINECALLDICT
    STBREFR
  }>
  $BdbSale$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    LDMSGADDR
    64 LDU
    64 LDU
    64 LDU
    LDREF
    SWAP
    CTOS
                b{00} SDBEGINSQ
                IF:<{
                  PUSHNULL
                }>ELSE<{
                  LDMSGADDR
                  SWAP
                }>
    SWAP
                b{00} SDBEGINSQ
                IF:<{
                  PUSHNULL
                }>ELSE<{
                  LDMSGADDR
                  SWAP
                }>
    NIP
    s2 s8 XCHG
    s2 s7 XCHG
    s2 s6 XCHG
    s2 s5 XCHG
    s2 s4 XCHG
    s2 s3 XCHG
  }>
  $BdbSale$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    LDMSGADDR
    64 LDU
    64 LDU
    64 LDU
    LDREF
    SWAP
    CTOS
                b{00} SDBEGINSQ
                IF:<{
                  PUSHNULL
                }>ELSE<{
                  LDMSGADDR
                  SWAP
                }>
    SWAP
                b{00} SDBEGINSQ
                IF:<{
                  PUSHNULL
                }>ELSE<{
                  LDMSGADDR
                  SWAP
                }>
    NIP
    s2 s8 XCHG
    s2 s7 XCHG
    s2 s6 XCHG
    s2 s5 XCHG
    s2 s4 XCHG
    s2 s3 XCHG
  }>
  $BdbSale$_contract_init PROCINLINE:<{
  }>
  $BdbSale$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $BdbSale$_load INLINECALLDICT
      1 8 BLKDROP2
    }>ELSE<{
      $BdbSale$init$_load INLINECALLDICT
      s0 s8 XCHG
      ENDS
      7 ROLL
      $BdbSale$_contract_init INLINECALLDICT
    }>
  }>
  $BdbSale$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    8 -ROLL
    $BdbSale$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $SendParameters$_constructor_to_value_bounce_body PROCINLINE:<{
    0 PUSHINT
    s3 s4 XCHG2
    PUSHNULL
    s0 s3 XCHG
    PUSHNULL
    3 -ROLL
  }>
  $SendParameters$_constructor_to_value_bounce PROCINLINE:<{
    0 PUSHINT
    s0 s3 XCHG
    PUSHNULL
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s3 s3 XCHG2
  }>
  $BdbSale$_fun_handleUsdtNotification PROCREF:<{
    __tact_context_get INLINECALLDICT
    DROP
    s2 POP
    s3 PUSH
    ISNULL
    406 THROWIF
    s3 PUSH
    __tact_not_null INLINECALLDICT
    SDEQ
    NOT
    407 THROWIF
    SWAP
    64 LDU
    NIP
        LDVARUINT16
        LDMSGADDR
    DROP
    s6 PUSH
    1 LESSINT
    400 THROWIF
    s1 s6 PUSH2
    DIV
    DUP
    1 LESSINT
    101 THROWIF
    s0 s6 PUSH2
    GREATER
    102 THROWIF
    s5 PUSH
    ISNULL
    405 THROWIF
        NEWC
        ENDC
    FALSE
    PUSHNULL
        NEWC
    260734629 PUSHINT
    SWAP
    32 STU
    0 PUSHINT
    SWAP
    64 STU
    s4 PUSH
        STVARUINT16
    s0 s5 XCHG2
        STSLICER
    s14 PUSH
        STSLICER
    s1 s4 XCHG
        STOPTREF
    50000000 PUSHINT
        STVARUINT16
    s1 s3 XCHG
        1 STI
    s1 s2 XCHG
        STREF
        ENDC
    s5 PUSH
    __tact_not_null INLINECALLDICT
    70000000 PUSHINT
    ROT
    TRUE
    SWAP
    $SendParameters$_constructor_to_value_bounce_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        NEWC
        ENDC
    FALSE
    PUSHNULL
        NEWC
    260734629 PUSHINT
    SWAP
    32 STU
    0 PUSHINT
    SWAP
    64 STU
    s0 s5 XCHG2
        STVARUINT16
    s13 PUSH
        STSLICER
    s13 PUSH
        STSLICER
    s1 s4 XCHG
        STOPTREF
    50000000 PUSHINT
        STVARUINT16
    s1 s3 XCHG
        1 STI
    s1 s2 XCHG
        STREF
        ENDC
    s3 PUSH
    __tact_not_null INLINECALLDICT
    70000000 PUSHINT
    ROT
    TRUE
    SWAP
    $SendParameters$_constructor_to_value_bounce_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
    OVER
    0 GTINT
    IF:<{
      s9 s1 PUXC
      FALSE
      $SendParameters$_constructor_to_value_bounce INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
    }>ELSE<{
      NIP
    }>
    s1 s3 XCHG
    SUB
    s0 s2 XCHG
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $BdbSale$_contract_load INLINECALLDICT
    s0 s9 XCHG
    IFJMP:<{
      9 BLKDROP
    }>
    __tact_context_get INLINECALLDICT
    DROP
    s2 POP
    s9 PUSH
        SBITS
    31 GTINT
    IF:<{
      s0 s9 XCHG
      32 LDU
      OVER
      3182755841 PUSHINT
      EQUAL
      IFJMP:<{
        s11 POP
        3 BLKDROP
        s6 s5 XCPU
        SDEQ
        NOT
        403 THROWIF
        s0 s6 XCHG
            LDMSGADDR
            LDMSGADDR
        DROP
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s2 s4 XCHG
        $BdbSale$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      3182755842 PUSHINT
      EQUAL
      IFJMP:<{
        s6 POP
        2DROP
        s7 s6 XCPU
        SDEQ
        NOT
        403 THROWIF
        s0 s2 XCHG
        64 LDU
        DROP
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s4 XCHG2
        s0 s3 XCHG
        $BdbSale$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      3182755843 PUSHINT
      EQUAL
      IFJMP:<{
        s5 POP
        2DROP
        s7 s6 XCPU
        SDEQ
        NOT
        403 THROWIF
        SWAP
        64 LDU
        DROP
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s1 s4 s3 XCHG3
        $BdbSale$_contract_store INLINECALLDICT
        RETALT
      }>
      SWAP
      1935855772 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        s8 POP
        2 7 BLKSWAP
        $BdbSale$_fun_handleUsdtNotification INLINECALLDICT
        $BdbSale$_contract_store INLINECALLDICT
        RETALT
      }>
      DROP
    }>ELSE<{
      s9 POP
    }>
    DUP
    1 LESSINT
    IFJMP:<{
      DROP
      s7 POP
      s5 s7 XCHG
      2 5 BLKSWAP
      $BdbSale$_contract_store INLINECALLDICT
    }>
    s4 PUSH
    1 LESSINT
    400 THROWIF
    OVER
    ISNULL
    405 THROWIF
    DUP
    70000000 PUSHINT
    SUB
    DUP
    1 LESSINT
    101 THROWIF
    s5 PUSH
    DIV
    DUP
    1 LESSINT
    101 THROWIF
    s0 s3 PUSH2
    GREATER
    102 THROWIF
        NEWC
        ENDC
    FALSE
    PUSHNULL
        NEWC
    260734629 PUSHINT
    SWAP
    32 STU
    0 PUSHINT
    SWAP
    64 STU
    s4 PUSH
        STVARUINT16
    s0 s13 XCHG2
        STSLICER
    s11 PUSH
        STSLICER
    s1 s12 XCHG
        STOPTREF
    50000000 PUSHINT
        STVARUINT16
    s1 s11 XCHG
        1 STI
    s1 s10 XCHG
        STREF
        ENDC
    s2 PUSH
    __tact_not_null INLINECALLDICT
    70000000 PUSHINT
    ROT
    TRUE
    SWAP
    $SendParameters$_constructor_to_value_bounce_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
    70000000 PUSHINT
    SUB
    s7 s(-1) PUXC
    FALSE
    $SendParameters$_constructor_to_value_bounce INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
    s0 s7 XCHG
    SUB
    s5 s7 XCHG
    2 5 BLKSWAP
    $BdbSale$_contract_store INLINECALLDICT
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
